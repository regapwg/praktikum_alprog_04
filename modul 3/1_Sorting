#include <stdio.h>
#include <stdlib.h>
#include <conio.h>
#include <time.h>


int keluar();
int main();

double check(){
  double input;
	char checkinput;
	int cek;

	cek=scanf("%lf%c", &input,&checkinput);

	if(cek!=2 || checkinput!='\n'){
	  printf("inputan anda tidak sesuai kriteria!\n");
		printf("Masukkan angka bukan huruf: ");
		fflush(stdin);
		cek=1;
		return check();

	}
	else if(input<=0){
		printf("inputan anda tidak sesuai kriteria! \n");
		printf("Masukkan angka selain -/0 : ");
		fflush(stdin);
		cek=1;
		return check();
	}
	else{
		cek=0;
		fflush(stdin);
		return input;
	}

}

void bilanganRandom(int arr[], int n){
    int i;
    srand(0);

    for (i = 0; i < n; i++) {
        arr[i] = rand()%1000;
    }
}

void duplikatArray(int asal[], int target[], int n){
    int i;
    for (i = 0; i < n; i++)
        target[i] = asal[i];
}

void printArray(int arr[], int n) {
    int i;
    for (i = 0; i < n; i++) {
        printf("\nAngka ke-%d = %d", i, arr[i]);
    }
}

int partition(int arr[], int low, int high){
    int pivot = arr[high];
    int temp;
    int i = (low - 1);
    for (int j = low; j <= high - 1; j++){
        if (arr[j] <= pivot){
            i++;
            temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
    }
    temp = arr[i + 1];
    arr[i + 1] = arr[high];
    arr[high] = temp;
    return (i + 1);
}

void quickSort(int arr[], int low, int high){
    int p;
    if (low < high){
        p = partition(arr, low, high);
        quickSort(arr, low, p - 1);
        quickSort(arr, p + 1, high);
    }
}

void insertionSort(int arr[], int n){
    int i, j, temp;
    for (i = 1; i < n; i++){
        temp = arr[i];
        j = i - 1;
    while (j >= 0 && arr[j] > temp){
        arr[j + 1] = arr[j];
        j--;
    }
    arr[j + 1] = temp;
    }
}

void bubbleSort(int arr[], int n){
    int i, j, temp;
    for (i = 0; i < n - 1; i++){
        for (j = 0; j < n - i - 1; j++){
            if (arr[j] > arr[j + 1]){
                temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

int sort(){
    clock_t start, end;
    double waktu1, waktu2, waktu3;
    int i, n, pilihan;
    system("cls");
    printf("====================================\n");
    printf("| Pilihan Jumlah Data              |\n");
    printf("====================================\n");
    printf("| 1. 1000 Data                     |\n");
    printf("| 2. 16000 Data                    |\n");
    printf("| 3. 64000 Data                    |\n");
    printf("| 4. Kembali                       |\n");
    printf("| 5. Exit                          |\n");
    printf("====================================\n");
    printf("\nMasukkan pilihan Anda : ");
    pilihan = check();
    system("cls");

    if(pilihan == 1){
        n = 1000;
    }
    else if(pilihan == 2){
        n = 16000;
    }
    else if(pilihan == 3){
        n = 64000;
    }
    else if(pilihan == 4){
        main();
    }
    else if(pilihan == 5){
		printf("=================================================\n");
		printf("| Terima kasih telah menggunakan program kami!  |\n");
		printf("|             Salam dari kelompok 4             |\n");
		printf("=================================================\n");
		exit(0);
    }
    else{
        system("cls");
        printf("\nMasukkan input dari angka 1 sampai 5\n\n");
        getch();
        sort();
    }
    int arr[n];
    int arr2[n];
    int arr3[n];

    bilanganRandom(arr, n);
    printf("\n\n");
    printf("=================================\n");
    printf("Array %d random sebelum di sort :\n", n);
    printArray(arr, n);
    duplikatArray(arr, arr2, n);
    duplikatArray(arr, arr3, n);

    start = clock();
    insertionSort(arr, n);
    end = clock();
    waktu1 = (double)(end - start) / CLOCKS_PER_SEC;

    start = clock();
    bubbleSort(arr2, n);
    end = clock();
    waktu2 = (double)(end - start) / CLOCKS_PER_SEC;

    start = clock();
    quickSort(arr3, 0, n - 1);
    end = clock();
    waktu3 = (double)(end - start) / CLOCKS_PER_SEC;

    printf("\n\n");
    printf("==============================");
    printf("\n%d angka setelah disorting :\n", n);
    sleep(2);
    printArray(arr, n);

    printf("\n\n");
    printf("\n=============================================");
    printf("\n| Hasil Waktu                               |");
    printf("\n=============================================");

    printf("\nWaktu Insertion Sort = %f", waktu1);
    printf("\nWaktu Bubble Sort = %f", waktu2);
    printf("\nWaktu Quick Sort = %f\n", waktu3);

    if(waktu1 == waktu2 && waktu1 == waktu3){
        printf("\n=============================================");
        printf("\n| Ketiganya Setara!                         |");
        printf("\n=============================================");
    }
    else if(waktu1 == waktu2){
        printf("\n=============================================");
        printf("\n| Insertion dan Bubble Sort Setara!         |");
        printf("\n=============================================");
    }
    else if(waktu1 == waktu3){
        printf("\n=============================================");
        printf("\n| Insertion dan Quick Sort Setara!          |");
        printf("\n=============================================");
    }
    else if(waktu2 == waktu3){
        printf("\n=============================================");
        printf("\n| Bubble dan Quick Sort Setara!             |");
        printf("\n=============================================");
    }
    else if(waktu1 <= waktu2 && waktu1 <= waktu3){
        printf("\n==============================================");
        printf("\n| Insertion Sort Paling Cepat!               |");
        printf("\n==============================================");
    }
    else if(waktu2 <= waktu1 && waktu2 <= waktu3){
        printf("\n=============================================");
        printf("\n| Bubble Sort Paling Cepat!                 |");
        printf("\n=============================================");
    }
    else if(waktu3 <= waktu1 && waktu3 <= waktu2){
        printf("\n=============================================");
        printf("\n| Quick Sort Paling Cepat!                  |");
        printf("\n=============================================");
    }
    keluar();
}

double sequentialSearch(int arr[], int n, int angkaDicari) {
    clock_t start, end;
    double waktu;
    int i, counter = 0;

    start = clock();
    for (i = 0; i < n; i++) {
        if (arr[i] == angkaDicari) {
            counter++;
        }
        printf("-Angka ke-%d : %d", i, arr[i]);
        printf("\n");
    }
    end = clock();
    waktu = (double)(end - start) / CLOCKS_PER_SEC;

    if (counter == 0) {
        printf("\n=====================================================================================================\n");
        printf("\nAngka %d tidak ditemukan pada indeks sequential search!", angkaDicari);
    } else {
        int indexAngkaDicari[counter];
        counter = 0;

        for (i = 0; i < n; i++) {
            if (arr[i] == angkaDicari) {
                indexAngkaDicari[counter] = i;
                counter++;
            }
        }

        printf("\n=====================================================================================================");
        printf("\n\nAngka %d ditemukan pada index sequential search: ", angkaDicari);
        for (i = 0; i < counter; i++) {
            if (i == 0 && i == counter - 1) {
                printf(" %d.", indexAngkaDicari[i]);
            }
            else if (i == counter - 1) {
                printf(" dan %d.", indexAngkaDicari[i]);
            }
            else {
                printf(" %d,", indexAngkaDicari[i]);
            }
        }
    }
    return waktu;
}

double binarySearch(int arr[], int low, int high, int angkaDicari) {
    clock_t start, end;
    double waktu;
    int i, counter = 0;

    start = clock();
    while (low <= high) {
        int mid = low + (high - low) / 2;

        if (arr[mid] == angkaDicari) {
            counter++;
            for (i = mid + 1; i < high + 1 && arr[i] == angkaDicari; i++) {
                counter++;
            }
            for (i = mid - 1; i < high + 1 && arr[i] == angkaDicari; i++) {
                counter++;
            }
            break;
        }
        else if (arr[mid] > angkaDicari) {
            high = mid - 1;
        }
        else {
            low = mid + 1;
        }
    }
    end = clock();
    waktu = (double)(end - start) / CLOCKS_PER_SEC;

    if (counter == 0) {
        printf("\n\nAngka %d tidak ditemukan pada indeks binary search!", angkaDicari);
    }
    else {
        int indexAngkaDicari[counter];
        counter = 0;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (arr[mid] == angkaDicari) {
                indexAngkaDicari[counter] = mid;
                counter++;
                for (i = mid + 1; i < high + 1 && arr[i] == angkaDicari; i++) {
                    indexAngkaDicari[counter] = i;
                    counter++;
                }
                for (i = mid - 1; i > 0 && arr[i] == angkaDicari; i--) {
                    indexAngkaDicari[counter] = i;
                    counter++;
                }
                break;
            }
            else if (arr[mid] > angkaDicari) {
                high = mid - 1;
            }
            else {
                low = mid + 1;
            }
        }

        printf("\n\nAngka %d ditemukan pada index binary search: ", angkaDicari);
        bubbleSort(indexAngkaDicari, counter);
        for (i = 0; i < counter; i++) {
            if (i == 0 && i == counter - 1) {
                printf(" %d.", indexAngkaDicari[i]);
            }
            else if (i == counter - 1) {
                printf(" dan %d.", indexAngkaDicari[i]);
            }
            else {
                printf(" %d,", indexAngkaDicari[i]);
            }
        }
    }
    return waktu;
}

int search() {
    clock_t start, end;
    double waktu1, waktu2;
    int i, n, angkaDicari, pilihan;
    system("cls");
    printf("====================================\n");
    printf("| Pilihan Jumlah Data Searching    |\n");
    printf("====================================\n");
    printf("| 1. 1000 Data                     |\n");
    printf("| 2. 16000 Data                    |\n");
    printf("| 3. 64000 Data                    |\n");
    printf("| 4. Kembali                       |\n");
    printf("| 5. Exit                          |\n");
    printf("====================================\n");
    printf("\nMasukkan pilihan Anda : ");
    pilihan = check();
    system("cls");

    if(pilihan == 1){
        n = 1000;
    }
    else if(pilihan == 2){
        n = 16000;
    }
    else if(pilihan == 3){
        n = 64000;
    }
    else if(pilihan == 4){
        main();
    }
    else if(pilihan == 5){
		printf("=================================================\n");
		printf("| Terima kasih telah menggunakan program kami!  |\n");
		printf("|             Salam dari kelompok 4             |\n");
		printf("=================================================\n");
		exit(0);
    }
    else{
        system("cls");
        printf("\nMasukkan input dari angka 1 sampai 5\n\n");
        getch();
        search();
    }

    int arr[n];
    int arr2[n];
    bilanganRandom(arr, n);
    printArray(arr, n);

    printf("\n\nMasukkan Angka Yang Ingin Dicari: ");
    angkaDicari = check();

    bubbleSort(arr, n);
    waktu1 = sequentialSearch(arr, n, angkaDicari);
    waktu2 = binarySearch(arr, 0, n - 1, angkaDicari);

    printf("\n\n=====================================================================================================");
    printf("\n\nHasil waktu: \n");
    printf("\nSequential Search Membutuhkan %f Detik Untuk Mencari Data", waktu1);
    printf("\nBinary Search Membutuhkan %f Detik Untuk Mencari Data\n", waktu2);

    if(waktu1 < waktu2){
        printf("\n=============================================");
        printf("\n| Sequential Search Lebih Cepat!            |");
        printf("\n=============================================");
    }
    else if(waktu2 < waktu1){
        printf("\n=============================================");
        printf("\n| Binary Search Lebih Cepat!                |");
        printf("\n=============================================");
    }
    else if( waktu1 == waktu2){
        printf("\n=============================================");
        printf("\n| Sequential dan Binary Search Setara!      |");
        printf("\n=============================================");
    }
    keluar();
}

int main(){
    char pilihan;
    system("cls");

  printf("==============================================\n");
	printf("|        Program Sorting Dan Searching       |\n");
	printf("==============================================\n");
	printf("|                                            |\n");
	printf("|                                            |\n");
	printf("|                    From:                   |\n");
	printf("|                 Kelompok 4                 |\n");
	printf("|                                            |\n");
	printf("|                                            |\n");
	printf("==============================================\n");

    printf("\n");
    printf("\n=====================");
    printf("\n| PILIHAN PROGRAM   |");
    printf("\n=====================");
    printf("\n| 1. Sorting        |");
    printf("\n| 2. Searching      |");
    printf("\n| 3. Exit           |");
    printf("\n=====================");
    printf("\n\nMasukkan nomor urut dari pilihan anda :");
    pilihan = check();
    system("cls");

    if(pilihan == 1){
        sort();
    }
    else if(pilihan == 2){
        search();
    }
    else if(pilihan == 3){
        system("cls");
		printf("=================================================\n");
		printf("| Terima kasih telah menggunakan program kami!  |\n");
		printf("|             Salam dari kelompok 4             |\n");
		printf("=================================================\n");
        exit(0);
    }
    else{
        system("cls");
        printf("\nInput Anda salah! Masukkan angka 1 sampai 3!");
        getch();
        main();
    }
}

int keluar(){

	int opsi;

    printf("\n");
	printf("=================================================\n");
	printf("| 1. Kembali ke menu                            |\n");
	printf("| 2. Keluar dari program                        |\n");
	printf("=================================================\n");
	printf("Masukkan pilihan anda: ");
	opsi=check();
	system("cls");

	if (opsi==1){
		main();
	}
	else if(opsi==2){
		system("cls");
		printf("=================================================\n");
		printf("| Terima kasih telah menggunakan program kami!  |\n");
		printf("|             Salam dari kelompok 4             |\n");
		printf("=================================================\n");
	}
	else {
		system("cls");
		printf("=================================================\n");
		printf("|            Masukkan input yang benar!         |\n");
		printf("=================================================\n");
		system("cls");
		keluar();
	}

}
